from vtk import vtkPolyData

class Mesh:
    def __init__(self, pd: vtkPolyData | None = None, other: Mesh | None = None) -> None: ...
    def copy_to(self, other: Mesh) -> None:
        """
        Copies self content to other.
        """
    def to_vtk(self) -> vtkPolyData:
        """
        Converts Mesh to vtkPolyData.
        """

def ca_smoothing(mesh: Mesh, T: float, tmax: float, bmin: float, n_iters: int) -> None:
    """
    This is a implementation of the paper "Context-aware mesh smoothing for
    biomedical applications". It can be used to smooth meshes generated by
    binary images to remove its staircase artifacts and keep the fine features.

    Params:
        mesh: Mesh
        T: Min angle (between vertex faces and stack_orientation) to consider a
           vertex a staircase artifact
        tmax: max distance the vertex must be to its nearest artifact vertex
              to considered to calculate the weight
        bmin: The minimum weight
        n_iters: Number of iterations.
    """
